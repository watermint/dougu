name: Package Artifacts (Reusable)

on:
  workflow_call:
    inputs:
      build-id:
        required: true
        type: string
      release:
        required: false
        type: string
        default: '0'

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check README exists
        run: |
          if [ ! -f README.md ]; then
            echo "README.md not found. Aborting." >&2
            exit 1
          fi
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Build project
        run: |
          # Set DOUGU_RELEASE environment variable from inputs
          export DOUGU_RELEASE="${{ inputs.release }}"
          # GITHUB_RUN_NUMBER is automatically set by GitHub Actions
          
          # Build with proper version information
          cargo build
      - name: Find executables
        id: find_execs
        run: |
          EXECUTABLES=$(find target/debug -maxdepth 1 -type f -executable -not -name "*.d" -not -name "*.rlib" -not -name "*.o" -not -name "*.json" -not -name "*.lock" -not -name "*.so" -not -name "*.dll" -not -name "*.dylib")
          if [ -z "$EXECUTABLES" ]; then
            echo "No executables found. Aborting." >&2
            exit 1
          fi
          echo "executables<<EOF" >> $GITHUB_OUTPUT
          echo "$EXECUTABLES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Prepare package directory
        run: |
          mkdir -p package
          cp ${{ steps.find_execs.outputs.executables }} package/
          cp README.md package/
          
          # Create version info file using the same info our build system uses
          echo "Release: ${{ inputs.release }}" > package/VERSION.txt
          echo "Build Type: github" >> package/VERSION.txt
          echo "Build ID: ${{ github.run_number }}" >> package/VERSION.txt
          echo "Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> package/VERSION.txt
      - name: Create zip archive
        run: |
          cd package
          zip -r ../artifacts-${{ inputs.build-id }}.zip .
      - name: Upload zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ inputs.build-id }}
          path: artifacts-${{ inputs.build-id }}.zip 